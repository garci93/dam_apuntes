TE CREAS MVVM Y SUBCARPETAS

MODEL
	[AddINotifyPropertyChangedInterface]
	DEFINIR CLASE CON ATRIBUTOS Y METODOS
VIEW
	LA VISTA DE TODA LA VIDA, CON SUS COMPONENTES CONTENTPAGE ETC
	MODIFICAR EL CS Y PONERLE BindingContext = new TuViewModel();
VIEWMODEL
	[AddINotifyPropertyChangedInterface]
	INSTANCIAR LA CLASE TUMODEL
	DEFINIR TU MODEL COMO SI FUERA UN ATRIBUTO DE TIPO TUMODEL CON SU GET SET (si, es redundante pero es asi xd)
	CONSTRUCTOR (POR DEFECTO?) DEL TUMODEL (SI, AQUI, NO EN EL TUMODEL)
app.xaml.cs
	MainPage = new TuView();

IMPORTANTE: NUGET, INSTALAR PROPERTYCHANGED.FODY, SQLITENETEXTENSION, sqlite-net-pcl


--- AÑADIR UNA NUEVA VISTA ---

APP.XAML.CS
	MainPage = new NavigationPage(new View1());

MAINPAGE.XAML.CS
	BindingContext = new View1();

VIEW1.XAML
	Añadir un Clicked al button correspondiente

VIEW1.XAML.CS
public partial class View1 : ContentPage
{
	ViewModel viewModel;							//declara el ViewModel
	public View1()
{
	InitializeComponent();
	viewModel = new ViewModel();
	BindingContext = viewModel;
}

    private async void Button_Clicked(object sender, EventArgs e)
    {
		View2 view2 = new View2(viewModel);				//instancia la vista 2 a partir del mismo viewmodel
		await Application.Current.MainPage.Navigation.PushAsync(view2);	//abre el view2 en una nueva página
    }
}

VIEW2.XAML.CS
	public View2(View2Model viewModel)
	{
		InitializeComponent();
		BindingContext = viewModel;
	}
}

Abstraction
	IBaseRepository.cs
	TableData.cs
Repository
	BaseRepository.cs
Constant.cs

DENTRO DEL MAUIPROGRAM.CS
	builder.Services.AddSingleton<BaseRepository<Cliente>>();
	builder.Services.AddSingleton<BaseRepository<Transaccion>>();


DENTRO APP.XAML.CS
public static BaseRepository<Cliente> ClienteRepo { get; private set; }
public static BaseRepository<Transaccion> TransaccionRepo { get; private set; }

public App(BaseRepository<Cliente> clienteRepo, BaseRepository<Transaccion> transaccionRepo)
{
    InitializeComponent();

    ClienteRepo = clienteRepo;
    TransaccionRepo = transaccionRepo;

    MainPage = new NavigationPage(new ControlGastosView());
}


PARA HACER COMMANDS!!!!! en el viewmodel
NombreCommand = new Command(() => ACCIÓN);
por ejemplo
ValorarCommand = new Command(() => Application.Current.MainPage.DisplayAlert("A domicilio", "Gracias por su valoración de un " + Pedido.Valoracion, "OK"));
displayalert lleva titulo, cuerpo y boton