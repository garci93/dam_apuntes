TE CREAS MVVM Y SUBCARPETAS

MODEL
	[AddINotifyPropertyChangedInterface]
	DEFINIR CLASE CON ATRIBUTOS Y METODOS
VIEW
	LA VISTA DE TODA LA VIDA, CON SUS COMPONENTES CONTENTPAGE ETC
	MODIFICAR EL CS Y PONERLE BindingContext = new TuViewModel();
VIEWMODEL
	[AddINotifyPropertyChangedInterface]
	INSTANCIAR LA CLASE TUMODEL
	DEFINIR TU MODEL COMO SI FUERA UN ATRIBUTO DE TIPO TUMODEL CON SU GET SET (si, es redundante pero es asi xd)
	CONSTRUCTOR (POR DEFECTO?) DEL TUMODEL (SI, AQUI, NO EN EL TUMODEL)
app.xaml.cs
	MainPage = new TuView();

IMPORTANTE: NUGET, INSTALAR PROPERTYCHANGED.FODY


--- AÑADIR UNA NUEVA VISTA ---

APP.XAML.CS
	MainPage = new NavigationPage(new View1());

MAINPAGE.XAML.CS
	BindingContext = new View1();

VIEW1.XAML
	Añadir un Clicked al button correspondiente

VIEW1.XAML.CS
public partial class GastosView : ContentPage
{
	GastosViewModel gastosViewModel;
	public GastosView()
	{
		InitializeComponent();
		gastosViewModel = new GastosViewModel();
		BindingContext = gastosViewModel;
	}

    private async void Button_Clicked(object sender, EventArgs e)
    {
		GastosView2 gastosView2 = new GastosView2(gastosViewModel);
		await Application.Current.MainPage.Navigation.PushAsync(gastosView2);
    }
}